#!/usr/bin/env python

Import('env')

env_assimp = env.Clone()
#env_assimp.disable_warnings()
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/assimp/code/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/assimp/code/AssetLib/ABC/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/assimp/code/PostProcessing/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/assimp/code/material/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/assimp/code/Common/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/assimp/code/CApi/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/assimp/contrib/openddlparser/code/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/godot/thirdparty/assimp/contrib/unzip/*.c'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/assimp/contrib/pugixml/src/*.cpp'))

env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/Half/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/Half/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/Iex/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IexMath/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/Imath/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThread.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadMutex.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadPool.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadSemaphore.cpp'))

if(env['platform'] == 'windows'):
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadMutexWin32.cpp'))
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadSemaphoreWin32.cpp'))
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadWin32.cpp'))
else:
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadMutexPosix.cpp'))
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadPosix.cpp'))
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadSemaphorePosixCompat.cpp'))
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadSemaphorePosix.cpp'))

env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/config/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/Abc/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcCollection/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcCoreAbstract/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcCoreFactory/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcCoreLayer/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcCoreOgawa/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcGeom/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcMaterial/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/Ogawa/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/Util/*.cpp'))
env_assimp.Append(CPPPATH=['#thirdparty/alembic/lib'])
env_assimp.Append(CPPPATH=['#thirdparty/alembic/lib/Alembic/Util'])
env_assimp.Append(CPPPATH=['#thirdparty/assimp/include'])
env_assimp.Append(CPPPATH=['#thirdparty/assimp/contrib'])
env_assimp.Append(CPPPATH=['#thirdparty/assimp/contrib/unzip'])
env_assimp.Append(CPPPATH=['#thirdparty/assimp/contrib/pugixml/src'])
env_assimp.Append(CPPPATH=['#thirdparty/assimp/code'])
env_assimp.Append(CPPPATH=['#thirdparty/assimp/'])
env_assimp.Append(CPPPATH=['#thirdparty/zlib/'])
env_assimp.Append(CPPPATH=['#thirdparty/assimp/contrib/openddlparser/include'])
env_assimp.Append(CPPPATH=['#thirdparty/assimp/contrib/rapidjson/include'])
env_assimp.Append(CPPPATH=['#thirdparty/openexr/IlmBase/Iex'])
env_assimp.Append(CPPPATH=['#thirdparty/openexr/IlmBase/Half'])
env_assimp.Append(CPPPATH=['#thirdparty/openexr/IlmBase/IexMath'])
env_assimp.Append(CPPPATH=['#thirdparty/openexr/IlmBase/Imath'])
env_assimp.Append(CPPPATH=['#thirdparty/openexr/IlmBase/lex'])
env_assimp.Append(CPPPATH=['ilmbase'])
env_assimp.Append(CPPPATH=['.'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_DOUBLE_PRECISION'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_BOOST_WORKAROUND'])
env_assimp.Append(CPPFLAGS=['-DOPENDDLPARSER_BUILD'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_OWN_ZLIB'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_C4D_IMPORTER']) # Licensed
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_IFC_IMPORTER']) # assimp_pch required?
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_STEP_IMPORTER']) # dependency
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_3MF_IMPORTER']) # zip isn't working
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_M3D_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_MMD_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_X3D_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_IQM_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_ASSBIN_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_GLTF_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_XGL_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_FBX_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_NDO_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_BLEND_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_COB_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_Q3BSP_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_Q3BSP_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_3D_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_X_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_CSM_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_B3D_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_Q3D_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_COLLADA_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_TERRAGEN_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_BVH_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_ASE_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_MD5_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_AC_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_IRR_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_IRRMESH_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_OGRE_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_SMD_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_HMP_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_MD3_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_PLY_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_MD2_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_MDC_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_3DS_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_OFF_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_LWO_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_AMF_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_STL_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_MDL_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_OBJ_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_RAW_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_DXF_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_NFF_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_SIB_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_MS3D_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_LWS_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_OPENGEX_IMPORTER'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_NO_EXPORT'])
env_assimp.Append(CPPFLAGS=['-DASSIMP_BUILD_SINGLETHREADED'])

if (env.msvc == False):
    env_assimp.Append(CXXFLAGS="-std=c++11")
elif (env.msvc == False and env['platform'] == 'windows' ):
     env_assimp.Append(LDFLAGS="-pthread")

if(env['platform'] == 'windows'):
    env_assimp.Append(CPPFLAGS=['-DPLATFORM_WINDOWS'])
    env_assimp.Append(CPPFLAGS=['-DPLATFORM=WINDOWS'])
elif(env['platform'] == 'x11'):
    env_assimp.Append(CPPFLAGS=['-DPLATFORM_LINUX'])
    env_assimp.Append(CPPFLAGS=['-DPLATFORM=LINUX'])
elif(env['platform'] == 'osx'):
    env_assimp.Append(CPPFLAGS=['-DPLATFORM_DARWIN'])
    env_assimp.Append(CPPFLAGS=['-DPLATFORM=DARWIN'])

# Godot's own source files
env_assimp.add_source_files(env.modules_sources, "*.cpp")
